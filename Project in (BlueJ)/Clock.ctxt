#BlueJ class context
comment0.target=Clock
comment0.text=\r\n\ The\ {@code\ Clock}\ class\ is\ responsible\ for\ tracking\ the\ number\ of\ cycles\r\n\ that\ have\ elapsed\ over\ time.\ \r\n\ @author\ Brendan\ Jones\r\n\r\n
comment1.params=cyclesPerSecond
comment1.target=Clock(float)
comment1.text=\r\n\ Creates\ a\ new\ clock\ and\ sets\ it's\ cycles-per-second.\r\n\ @param\ cyclesPerSecond\ The\ number\ of\ cycles\ that\ elapse\ per\ second.\r\n
comment2.params=cyclesPerSecond
comment2.target=void\ setCyclesPerSecond(float)
comment2.text=\r\n\ Sets\ the\ number\ of\ cycles\ that\ elapse\ per\ second.\r\n\ @param\ cyclesPerSecond\ The\ number\ of\ cycles\ per\ second.\r\n
comment3.params=
comment3.target=void\ reset()
comment3.text=\r\n\ Resets\ the\ clock\ stats.\ Elapsed\ cycles\ and\ cycle\ excess\ will\ be\ reset\r\n\ to\ 0,\ the\ last\ update\ time\ will\ be\ reset\ to\ the\ current\ time,\ and\ the\r\n\ paused\ flag\ will\ be\ set\ to\ false.\r\n
comment4.params=
comment4.target=void\ update()
comment4.text=\r\n\ Updates\ the\ clock\ stats.\ The\ number\ of\ elapsed\ cycles,\ as\ well\ as\ the\r\n\ cycle\ excess\ will\ be\ calculated\ only\ if\ the\ clock\ is\ not\ paused.\ This\r\n\ method\ should\ be\ called\ every\ frame\ even\ when\ paused\ to\ prevent\ any\r\n\ nasty\ surprises\ with\ the\ delta\ time.\r\n
comment5.params=paused
comment5.target=void\ setPaused(boolean)
comment5.text=\r\n\ Pauses\ or\ unpauses\ the\ clock.\ While\ paused,\ a\ clock\ will\ not\ update\r\n\ elapsed\ cycles\ or\ cycle\ excess,\ though\ the\ {@code\ update}\ method\ should\r\n\ still\ be\ called\ every\ frame\ to\ prevent\ issues.\r\n\ @param\ paused\ Whether\ or\ not\ to\ pause\ this\ clock.\r\n
comment6.params=
comment6.target=boolean\ isPaused()
comment6.text=\r\n\ Checks\ to\ see\ if\ the\ clock\ is\ currently\ paused.\r\n\ @return\ Whether\ or\ not\ this\ clock\ is\ paused.\r\n
comment7.params=
comment7.target=boolean\ hasElapsedCycle()
comment7.text=\r\n\ Checks\ to\ see\ if\ a\ cycle\ has\ elapsed\ for\ this\ clock\ yet.\ If\ so,\r\n\ the\ number\ of\ elapsed\ cycles\ will\ be\ decremented\ by\ one.\r\n\ @return\ Whether\ or\ not\ a\ cycle\ has\ elapsed.\r\n\ @see\ peekElapsedCycle\r\n
comment8.params=
comment8.target=boolean\ peekElapsedCycle()
comment8.text=\r\n\ Checks\ to\ see\ if\ a\ cycle\ has\ elapsed\ for\ this\ clock\ yet.\ Unlike\r\n\ {@code\ hasElapsedCycle},\ the\ number\ of\ cycles\ will\ not\ be\ decremented\r\n\ if\ the\ number\ of\ elapsed\ cycles\ is\ greater\ than\ 0.\r\n\ @return\ Whether\ or\ not\ a\ cycle\ has\ elapsed.\r\n\ @see\ hasElapsedCycle\r\n
comment9.params=
comment9.target=long\ getCurrentTime()
comment9.text=\r\n\ Calculates\ the\ current\ time\ in\ milliseconds\ using\ the\ computer's\ high\r\n\ resolution\ clock.\ This\ is\ much\ more\ reliable\ than\r\n\ {@code\ System.getCurrentTimeMillis()},\ and\ quicker\ than\r\n\ {@code\ System.nanoTime()}.\r\n\ @return\ The\ current\ time\ in\ milliseconds.\r\n
numComments=10
